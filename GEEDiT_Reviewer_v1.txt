//Google Earth Engine Digitisation Tool (GEEDiT) reviewer v1.0
//Written by James M Lea, University of Liverpool
//Email: j.lea@liverpool.ac.uk
 
//Uses shapefiles generated by GEEDiT/MaQiT to allow margins to be checked
//against original imagery

////////////////////////////////////////////////////////////////
Map.setOptions("SATELLITE");
Map.setCenter(0,45,2);
//Welcome menu
var welcomePanel=ui.Panel({
    style: {
    position: 'top-center'
    }
  });
  var welcomePanel1=ui.Panel({
    style: {
    position: 'bottom-center'
    }
  });
var welcomeTitle=ui.Label({
      value: 'GEEDiT Reviewer v1.0',
      style: {
        fontSize: '20px',
        margin: '1px 10px 1px 10px',
        fontWeight: 'bold',
        textAlign: 'center'
        }
    });
var welcomeSubtitle=ui.Label({value:'Written by James M. Lea, University of Liverpool',
      style: {
        fontSize: '10px',
        margin: '1px 10px 1px 10px',
        textAlign: 'center'
        }});
var welcomeSubtitle1=ui.Label({value:'Twitter: @JamesMLea, @LivUniGeog',
      style: {
        margin: '1px 10px 1px 10px',
        textAlign: 'center',
        fontSize: '10px'
        }});
var welcomeSubtitle2=ui.Label({value:'For more information visit www.liverpoolGEE.wordpress.com',
      style: {
        margin: '1px 10px 10px 10px',
        textAlign: 'center',
        fontSize: '10px',
        fontWeight: 'bold'
        }});
var welcomeRef=ui.Label({
      value: 'If you use this tool, please cite:',
      style: {
        fontWeight: 'bold',
        textAlign: 'center',
        fontSize: '8pt',
        margin: '1pt'
        }
    });
var welcomeRef1=ui.Label({
      value: ['Lea, JM (2018). Google Earth Engine Digitisation Tool (GEEDiT), and Margin change Quantification Tool (MaQiT) – simple tools for the rapid mapping and quantification of changing Earth surface margins., Earth Surface Dynamics'],
      style: {
        textAlign: 'center',
        fontSize: '8pt',
        margin: '1pt'
        }
    });
var welcomeLabel1=ui.Label({value:'Enter full Earth Engine path name of asset containing margins:',
                            style:{margin:'10px 10px 1px 10px'}});
var welcomeLabel2=ui.Label({value:'This is equivalent to the Table ID given in the assets tab (top left).',
                            style:{margin:'1px 10px 1px 10px',fontSize:'8pt'}});
var welcomeLabel3=ui.Label({value:'(e.g. users/userName/assetName)',
                            style:{margin:'1px 10px 1px 10px',fontSize:'8pt'}});
var welcomeLabel4=ui.Label({value:'This tool will work with MaQiT converted shapefiles uploaded to Earth Engine as tables.',
                            style:{margin:'1px 10px 1px 10px',fontSize:'8pt'}});
var welcomeLabel5=ui.Label({value:'Demonstration visualisation example: users/Jmleaglacio/Breida_L8_S2',
                            style:{margin:'10px 10px 1px 10px',fontSize:'8pt',fontWeight:'bold'}});

var welcomeText=ui.Textbox({style: {
    stretch: 'horizontal',
    margin: '1px 10px 1px 10px'
  }}).setPlaceholder('e.g. users/userName/assetName');
var welcomeNewProject=ui.Button('OK');
welcomePanel.add(welcomeTitle);
welcomePanel.add(welcomeSubtitle);
welcomePanel.add(welcomeSubtitle1);
welcomePanel.add(welcomeSubtitle2);
welcomePanel.add(welcomeLabel1);
welcomePanel.add(welcomeText);
welcomePanel.add(welcomeLabel2);
//welcomePanel.add(welcomeLabel3);
welcomePanel.add(welcomeLabel4);
welcomePanel.add(welcomeLabel5);
// welcomePanel.add(welcomeLabel6);
welcomePanel.add(welcomeNewProject);
welcomePanel1.add(welcomeRef);
welcomePanel1.add(welcomeRef1);
Map.add(welcomePanel);
Map.add(welcomePanel1);


  

//Gives menu to decide which bands to visualise imagery from.
var band_comb;
var band_custom=['B','B','B'];
var bandMenu = ui.Panel({
  style: {
    position: 'top-left',
    padding: '8px 15px'
  }
});

var band_combinations = {
  Natural: 'Natural',
  False_colour: 'False colour',
  Custom: 'Custom'
};

var band_comb_select = ui.Select({
  items: Object.keys(band_combinations),
  onChange: function(key) {
    band_comb=band_combinations[key];
  }
});
var bandLabel1=ui.Label({
      value: 'Select band combination for optical satellites:',
      style: {
        fontWeight: 'bold',
        padding: '0'
        }
    });
var bandLabel2=ui.Label({
      value: 'If Custom band combination, define this below:',
      style: {
        fontWeight: 'bold'
        }
    });
var bandLabel3=ui.Label({
      value: 'NOTE: If using a custom band combination, it is STRONGLY',
      style: {
        fontWeight: 'bold',
        fontSize: '10px'
        }
    });
var bandLabel4=ui.Label({
      value: 'recommended to analyse data from one satellite at a time',
      style: {
        fontWeight: 'bold',
        fontSize: '10px'
        }
    });
var bandLabel5=ui.Label({
      value: 'to avoid risk of script errors and data loss.',
      style: {
        fontWeight: 'bold',
        fontSize: '10px'
        }
    });
var bandRedBox=ui.Textbox({placeholder: 'Red band',
  onChange: function(text) {
    
    var bandRed=bandRedBox.getValue();
    band_custom[0]='B'+bandRed.toString();
  }
});
var bandGreenBox=ui.Textbox({placeholder: 'Green band',
  onChange: function(text) {
    
    var bandGreen=bandGreenBox.getValue();
    band_custom[1]='B'+bandGreen.toString();
  }
});
var bandBlueBox=ui.Textbox({placeholder: 'Blue band',
  onChange: function(text) {
    
    var bandBlue=bandBlueBox.getValue();
    band_custom[2]='B'+bandBlue.toString();
  }
});
var pansharp=1;
var bandPansharpCheckbox=ui.Checkbox('Pansharpen image (Landsat 7/8 only)?',true);
bandPansharpCheckbox.onChange(function(checked) {
  // Shows or hides the first map layer based on the checkbox's value.
  if(pansharp===1){
    pansharp=0;
  } else if(pansharp===0){
    pansharp=1;
  }
});
var bandLabel6=ui.Label({
      value: 'Gamma correction (optional):',
      style: {
        fontWeight: 'bold',
        padding: '0'
        }
    });
var gamma;
var bandGamma=ui.Textbox({placeholder: '2.0 (default)',
  onChange: function(text) {
    gamma=bandGamma.getValue();
  }
});

bandMenu.add(bandLabel1);
bandMenu.add(band_comb_select);
bandMenu.add(bandPansharpCheckbox);
bandMenu.add(bandLabel2);
bandMenu.add(bandRedBox);
bandMenu.add(bandGreenBox);
bandMenu.add(bandBlueBox);
bandMenu.add(bandLabel3);
bandMenu.add(bandLabel4);
bandMenu.add(bandLabel5);
bandMenu.add(bandLabel6);
bandMenu.add(bandGamma);
Map.add(bandMenu);

welcomeNewProject.onClick(function() {
//Project info panel
  Map.remove(welcomePanel);
  Map.remove(bandMenu);
  
  var featureColl=ee.FeatureCollection(welcomeText.getValue()).sort('Date');
  print(featureColl)
  
  if (band_comb===undefined){
    band_comb='Natural';
  }
  var band_combo;
  function sum(numbers) {
    return numbers.reduce(function(a,b) {
      return a + b;
    });
  }
   var totalImages=featureColl.size().getInfo();
   var features=featureColl.getInfo().features;
   var featureCollId=featureColl.id;
   //Get image collection from which margins were digitised
   var images = features.map(function(feature) {
     if(feature.properties.ImagePath!==undefined){
      return ee.Image(feature.properties.ImagePath);
     }else{
       //return ee.Image(featureCollId+'/'+feature.properties.image_id)
     }
    });
  var imageColl=ee.ImageCollection(images);
   var i=0;
   var g=0;
   var k=0;
   var j=0;
   var flag=0;
   var centreline;
   var terminus1=[];
   terminus1[0]=[];
   terminus1[1]=0;
   var termini=[];
   var indicies=showImage(i,g,imageColl,totalImages,band_comb,i,totalImages,pansharp,band_custom,gamma);
   var legend=addLegend(indicies[3],indicies[2],i+1,totalImages,indicies[8]);
   Map.add(legend);
   Map.addLayer(ee.Feature(features[i]));
   var centroid=ee.Feature(features[i]).centroid().getInfo().geometry.coordinates;
   Map.setCenter(centroid[0],centroid[1],10);
   
   ////////////////////
   var progressPanel = ui.Panel({
        style: {
          position: 'bottom-right',
          padding: '8px 15px'
        }
      });
    var progressSelect=ui.Select({
      placeholder:'Image/margin quality (optional)',
      items: ['excellent','ok','poor','n/a'],
    });
    var progressButton=ui.Button({
      label: 'Reject margin/next image'
    });
    var goBackButton=ui.Button({
      label: 'Go to previous image'
    });
    var acceptButton=ui.Button({
      label: 'Accept margin'
    });
    var exportButton=ui.Button({
      label: 'Export accepted margins'
    });
     var centWarningPanel=ui.Panel({
        style: {
        position: 'top-left',
        textAlign: 'center',
        margin: '2px'
        }
      });
      var centWarning1=ui.Label('- Ensure that the centreline starts and ends more than (1.5 x max margin width) upstream/downstream',
        {textAlign:'center',
          fontSize: '10px',
          fontWeight: 'bold',
          margin: '2px'
        });
    var centWarning2=ui.Label('- Remember to digitise the centreline from upstream to downstream',
          {textAlign:'center',
          fontSize: '10px',
          fontWeight: 'bold',
          margin: '2px'
        });
    centWarningPanel.add(centWarning1);
    centWarningPanel.add(centWarning2);
    progressPanel.add(acceptButton);
    progressPanel.add(progressButton);
    progressPanel.add(goBackButton);
    progressPanel.add(exportButton);
    Map.add(progressPanel);
    var zoomPanel = ui.Panel({
        style: {
          position: 'bottom-left',
          padding: '8px 15px'
        }
      });
    var zoomLabel=ui.Label('Set default zoom:');
     
    var zoomText=ui.Textbox('10 (default)');
    // zoomPanel.add(zoomLabel);
    // zoomPanel.add(zoomText);
    // Map.add(zoomPanel);
    
    acceptButton.onClick(function(){
      if(i<totalImages){
        Map.remove(Map.layers().get(1));
        Map.remove(Map.layers().get(0));
        
        termini[k]=features[i];
        print(termini);
        k=k+1;
        
        i=i+1;
         var indicies=showImage(i,g,imageColl,totalImages,band_comb,i,totalImages,pansharp,band_custom,gamma);
         var legend=addLegend(indicies[3],indicies[2],i+1,totalImages,indicies[8]);
         Map.add(legend);
         Map.addLayer(ee.Feature(features[i]));
         var centroid=ee.Feature(features[i]).centroid().getInfo().geometry.coordinates;
       
          //Map.setCenter(centroid[0],centroid[1]);
         } 
    });
    
    progressButton.onClick(function(){
      if(i<totalImages){
        Map.remove(Map.layers().get(1))
        Map.remove(Map.layers().get(0))
        i=i+1;
         var indicies=showImage(i,g,imageColl,totalImages,band_comb,i,totalImages,pansharp,band_custom,gamma);
         var legend=addLegend(indicies[3],indicies[2],i+1,totalImages,indicies[8]);
         Map.add(legend);
         Map.addLayer(ee.Feature(features[i]));
         var centroid=ee.Feature(features[i]).centroid().getInfo().geometry.coordinates;
       
          //Map.setCenter(centroid[0],centroid[1]);
         }      
    });
    goBackButton.onClick(function(){
      if(i>0){
        Map.remove(Map.layers().get(1))
        Map.remove(Map.layers().get(0))
        i=i-1;
         var indicies=showImage(i,g,imageColl,totalImages,band_comb,i,totalImages,pansharp,band_custom,gamma);
         var legend=addLegend(indicies[3],indicies[2],i+1,totalImages,indicies[8]);
         Map.add(legend);
         Map.addLayer(ee.Feature(features[i]));
         var centroid=ee.Feature(features[i]).centroid().getInfo().geometry.coordinates;
         
          //Map.setCenter(centroid[0],centroid[1]);
        
      }
    });
    exportButton.onClick(function(){
      print(termini)
      var expFeatures=ee.FeatureCollection(termini);
      print(expFeatures)
      var task=Export.table.toDrive({
        collection: expFeatures,
        description: 'ReviewedMargins',
        folder: 'EarthEngine',
        fileFormat: 'GeoJSON'
        //projection: 'EPSG:4326'
      });
    });
    
    ////Centreline Drawing
    var centrelinePanel = ui.Panel({
        style: {
          position: 'bottom-left',
          padding: '8px 15px'
        }
      });
    var viewAllMarginsButton=ui.Button({
      label: 'View all margins'
    });
    var viewAcceptedMarginsButton=ui.Button({
      label: 'View accepted margins'
    });
    var clearMarginsButton=ui.Button({
      label: 'Clear layer from view'
    });
    var drawCentrelineButton=ui.Button({
      label: 'Draw centreline'
    });
    var exportCentrelineButton=ui.Button({
      label: 'Export centreline'
    });
    
    
    drawCentrelineButton.onClick(function(){
      Map.remove(centWarningPanel);
      Map.add(centWarningPanel);
      j=0;
      Map.style().set('cursor', 'crosshair');
      print('terminus1',terminus1)
      if(terminus1[1]!==0){
       flag=1;
       Map.unlisten();
       Map.remove(Map.layers().get(Map.layers().length()-1));
       Map.remove(Map.layers().get(Map.layers().length()-1));
       terminus1[0]=[];
       terminus1[1]=0;
       
       centreline=drawTerminus(terminus1,j,flag);
      } else {
       centreline=drawTerminus(terminus1,j,flag);
      }
      
    });
    exportCentrelineButton.onClick(function(){
      if (terminus1[0]!==undefined){
        print(terminus1)
        var expCentreline=ee.FeatureCollection(ee.Geometry.LineString(terminus1[0]));
        var task=Export.table.toDrive({
          collection: expCentreline,
          description: 'Centreline',
          folder: 'EarthEngine',
          fileFormat: 'GeoJSON'
          //projection: 'EPSG:4326'
        });
      }
    });
    viewAllMarginsButton.onClick(function(){
      Map.remove(centWarningPanel);
      Map.addLayer(featureColl,[],'margins');
    });
    viewAcceptedMarginsButton.onClick(function(){
      Map.remove(centWarningPanel);
      if(termini.length>0){
        Map.addLayer(ee.FeatureCollection(termini),[],'margins');
      }
    });
    clearMarginsButton.onClick(function(){
      Map.remove(centWarningPanel);
      Map.remove(Map.layers().get(Map.layers().length()-1));
    });
    
    centrelinePanel.add(viewAllMarginsButton);
    centrelinePanel.add(viewAcceptedMarginsButton);
    centrelinePanel.add(clearMarginsButton);
    centrelinePanel.add(drawCentrelineButton);
    centrelinePanel.add(exportCentrelineButton);
    Map.add(centrelinePanel);
});
 
  
  function addLegend(satellite,date,imageNumber,totalImages,image_info){
    var legend=[];
        // set position of panel
        legend = ui.Panel({
          style: {
            position: 'top-right',
            padding: '8px 15px'
          }
        });
        if(satellite==='SENTINEL_1'){
          var legendTitle = ui.Label({
            value: satellite+[' (']+image_info.bands[0].id+[')'],
            style: {
              fontWeight: 'bold',
              fontSize: '18px',
              margin: '0 0 4px 0',
              padding: '0'
              }
          });
          var legendTitle1 = ui.Label({
            value: image_info.properties.orbitProperties_pass,
            style: {
              fontWeight: 'bold',
              fontSize: '10px',
              margin: '0 0 4px 0',
              padding: '0'
              }
          })
        } else {
          legendTitle = ui.Label({
            value: satellite,
            style: {
              fontWeight: 'bold',
              fontSize: '18px',
              margin: '0 0 4px 0',
              padding: '0'
              }
          });
        }
        var dateLabel = ui.Label({
          value: date,
          style: {
            fontSize: '18px',
            margin: '0 0 4px 0',
            padding: '0'
            }
        });
        
        var imageCountLabel=ui.Label('Image: '+imageNumber+'/'+totalImages);
        
        // Add the title to the panel
        legend.add(legendTitle);
        if(satellite==='SENTINEL_1'){
          legend.add(legendTitle1);
        }
        legend.add(dateLabel);
        legend.add(imageCountLabel);
        //legend.add(imageCountText);
        return legend;
        //legend.add(imageCountLabel);
  }
  
  /////////////////////////////////////////
  function showImage(i,g,collections,count_lists,band_comb,imageNumber,totalImages,pansharp,band_custom,gamma) {
  if (g<=6){
    var coll=collections;
    var count=count_lists[g];
    var list=coll.getInfo().features; // gets image coll info
    print(list)
    var image_info=list[i];
    var date=image_info.properties.DATE_ACQUIRED;
    print(date)
    var satellite=image_info.properties.SPACECRAFT_ID;
    if (image_info.id.substring(11,13)==='S2'||image_info.id.substring(11,13)==='S1'){
      date=sentinelDateIdentifier(image_info);
      satellite=sentinelSatelliteIdentifier(image_info);
    }
    if(gamma===undefined){
      gamma=2;
    }
    var band_combo=band_choice(satellite,band_comb,band_custom);
    var landsatGamma=gamma;
    var landsat8Gamma=gamma;
    var sentinelGamma=gamma;
    var image1=ee.Image(image_info.id);
    if (satellite==='SENTINEL_1'){
      var visParams= {
      min: -20,
      max: 1,
      };
      var image=ee.Image(image_info.id);
      var asc_desc=image_info.properties.orbitProperties_pass;
    } else {
      asc_desc='n/a';
    }
    if (satellite==='SENTINEL_2'){
      visParams= {
      bands: band_combo,
      gamma: sentinelGamma,
      gain: 0.025
      };
      image=image1;
    }
    if(satellite==='LANDSAT_8'||satellite==='LANDSAT_7'){
      visParams= {
      gamma: landsat8Gamma,
      //gain: 500
      };
      if(pansharp===1){
        var hsv=image1.select(band_combo).rgbToHsv();
        image = ee.Image.cat([
          hsv.select('hue'), hsv.select('saturation'), image1.select('B8')
        ]).hsvToRgb();
      } else {
        image=image1;
      }
    }
    if (satellite==='LANDSAT_4'||satellite==='LANDSAT_5'){
      visParams= {
      bands: band_combo,
      gamma: landsatGamma
      };
      image=image1;
    }
    
    Map.addLayer(image,visParams);
    
    if(i===count){
      i=-1;
    }
    var indicies=[];
    indicies[0]=i;
    indicies[1]=g;
    indicies[2]=date;
    indicies[3]=satellite;
    indicies[4]=image_info.id;
    indicies[5]=image;
    indicies[6]=visParams;
    indicies[7]=asc_desc;
    indicies[8]=image_info;
    return indicies;
    //Set up functions to get metadata for Sentinel imagery
    function sentinelDateIdentifier(sentinel_identifier){
      if (sentinel_identifier.id.substring(11,13)==='S2'){
          var s_year=sentinel_identifier.id.substring(14,18);
          var s_month=String(sentinel_identifier.id.substring(18,20));
          var s_day=String(sentinel_identifier.id.substring(20,22));
          if (s_month.length < 2) s_month = '0' + s_month;
          if (s_day.length < 2) s_day = '0' + s_day;
          var date=[s_year, s_month, s_day].join('-');
          
          return date;
        }
      if (sentinel_identifier.id.substring(11,13)==='S1'){
          s_year=sentinel_identifier.id.substring(35,39);
          s_month=String(sentinel_identifier.id.substring(39,41));
          s_day=String(sentinel_identifier.id.substring(41,43));
          if (s_month.length < 2) s_month = '0' + s_month;
          if (s_day.length < 2) s_day = '0' + s_day;
          date=[s_year, s_month, s_day].join('-');
          
          return date;
        }
    }
    function sentinelSatelliteIdentifier(sentinel_identifier){
      if (sentinel_identifier.id.substring(11,13)==='S2'){
          var satellite='SENTINEL_2';
          return satellite;
        }
      if (sentinel_identifier.id.substring(11,13)==='S1'){
        satellite='SENTINEL_1';
        return satellite;
      }
    }
    
    // Function to select proper natural/false colour band combination
    function band_choice(satellite,band_comb,band_custom){
      var natural=['B3', 'B2', 'B1'];
      var natural_L8=['B4', 'B3', 'B2'];
      var false_col=['B5', 'B4', 'B3'];
      var false_col_L8=['B6', 'B5', 'B4'];
      var false_col_S2=['B8', 'B4', 'B3'];
      
      if(band_comb==='Custom'){
        var band_combo=band_custom;
      }
      
      
      if (satellite==='LANDSAT_8'){
        if(band_comb==='Natural'){
          band_combo=natural_L8;
        }
        if (band_comb==='False colour'){
          band_combo=false_col_L8;
        }
      } else {
        if(band_comb==='Natural'){
          band_combo=natural;
        }
        if (band_comb==='False colour'){
          band_combo=false_col;
        }
      }
      if (satellite==='SENTINEL_2'){
        if(band_comb==='Natural'){
          band_combo=natural_L8;
        }
        if (band_comb==='False colour'){
          band_combo=false_col_S2;
        }
      }
      
      return band_combo;
    }
  }
  }
  
  function drawTerminus(terminus1,j,flag){
  // if (terminus1[0]!==undefined){
    terminus1[0]=[];
    terminus1[1]=0;
  // }
    //terminus1[0]=undefined;
    j=0;
  // } else {
  //   k=terminus1[1];
  // }
   var clickAdd=Map.onClick(function(coords) {
     var terminus_visualisation;
     if(flag===1){
       terminus_visualisation=[];
       termDraw=[];
       j=0;
       flag=0;
     }
    
    terminus1[0][j]=[coords.lon, coords.lat];
    j=j+1;
    terminus1[1]=j;
    
     
    if(terminus1[0][1]===undefined){
      terminus_visualisation=ee.Geometry.Point(terminus1[0][0]);
      Map.addLayer(terminus_visualisation,{color: '#FFF000',
      style: {width: '30px'}
      },'Start point');
    } else {
      termDraw=[];
        var termDraw=ee.Geometry.LineString(terminus1[0]);
      //}
      if(j>2){
        Map.remove(Map.layers().get(Map.layers().length()-1))
      }
      Map.addLayer(termDraw,{color: '#FFF000',
      style: {width: '30px'}
      },'Margin');
    }
 // terminus1[1]=j;
   });
   return terminus1;
  }